{"/home/travis/build/npmtest/node-npmtest-ios-sim/test.js":"/* istanbul instrument in package npmtest_ios_sim */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ios-sim/lib.npmtest_ios_sim.js":"/* istanbul instrument in package npmtest_ios_sim */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ios_sim = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ios_sim = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ios-sim/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ios-sim && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ios_sim */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ios_sim\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ios_sim.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ios_sim.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ios_sim.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ios_sim.__dirname + '/lib.npmtest_ios_sim.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ios-sim/node_modules/ios-sim/ios-sim.js":"var iossim = require('./src/lib.js');\niossim.init();\n\nexports = module.exports = iossim;\n","/home/travis/build/npmtest/node-npmtest-ios-sim/node_modules/ios-sim/src/lib.js":"/*\nThe MIT License (MIT)\n\nCopyright (c) 2014 Shazron Abdullah\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n//jscs:disable maximumLineLength\n\nvar path = require('path'),\n    fs = require('fs'),\n    help = require('./help'),\n    util = require('util');\nvar simctl;\nvar bplist;\nvar plist;\n\nfunction findFirstAvailableDevice(list) {\n    /*\n        // Example result:\n        {\n            name : 'iPhone 6',\n            id : 'A1193D97-F5EE-468D-9DBA-786F403766E6',\n            runtime : 'iOS 8.3'\n        }\n    */\n\n    // the object to return\n    var ret_obj = {\n        name: null,\n        id: null,\n        runtime: null\n    };\n\n    var available_runtimes = {};\n\n    list.runtimes.forEach(function(runtime) {\n        if (runtime.available) {\n            available_runtimes[ runtime.name ] = true;\n        }\n    });\n\n    list.devices.some(function(deviceGroup) {\n        deviceGroup.devices.some(function(device) {\n            if (available_runtimes[deviceGroup.runtime]) {\n                ret_obj = {\n                    name: device.name,\n                    id: device.id,\n                    runtime: deviceGroup.runtime\n                };\n                return true;\n            }\n            return false;\n        });\n        return false;\n    });\n\n    return ret_obj;\n}\n\nfunction findRuntimesGroupByDeviceProperty(list, deviceProperty, availableOnly) {\n    /*\n        // Example result:\n        {\n            \"iPhone 6\" : [ \"iOS 8.2\", \"iOS 8.3\"],\n            \"iPhone 6 Plus\" : [ \"iOS 8.2\", \"iOS 8.3\"]\n        }\n    */\n\n    var runtimes = {};\n    var available_runtimes = {};\n\n    list.runtimes.forEach(function(runtime) {\n        if (runtime.available) {\n            available_runtimes[ runtime.name ] = true;\n        }\n    });\n\n    list.devices.forEach(function(deviceGroup) {\n        deviceGroup.devices.forEach(function(device) {\n            var devicePropertyValue = device[deviceProperty];\n\n            if (!runtimes[devicePropertyValue]) {\n                runtimes[devicePropertyValue] = [];\n            }\n            if (availableOnly) {\n                if (available_runtimes[deviceGroup.runtime]) {\n                    runtimes[devicePropertyValue].push(deviceGroup.runtime);\n                }\n            } else {\n                runtimes[devicePropertyValue].push(deviceGroup.runtime);\n            }\n        });\n    });\n\n    return runtimes;\n}\n\nfunction findAvailableRuntime(list, device_name) {\n\n    var all_druntimes = findRuntimesGroupByDeviceProperty(list, 'name', true);\n    var druntime = all_druntimes[ filterDeviceName(device_name) ];\n    var runtime_found = druntime && druntime.length > 0;\n\n    if (!runtime_found) {\n        console.error(util.format('No available runtimes could be found for \"%s\".', device_name));\n        process.exit(1);\n    }\n\n    // return most modern runtime\n    return druntime.sort().pop();\n}\n\nfunction getDeviceFromDeviceTypeId(devicetypeid) {\n    /*\n        // Example result:\n        {\n            name : 'iPhone 6',\n            id : 'A1193D97-F5EE-468D-9DBA-786F403766E6',\n            runtime : 'iOS 8.3'\n        }\n    */\n\n    // the object to return\n    var ret_obj = {\n        name: null,\n        id: null,\n        runtime: null\n    };\n\n    var options = { 'silent': true };\n    var list = simctl.list(options).json;\n\n    var arr = [];\n    if (devicetypeid) {\n        arr = devicetypeid.split(',');\n    }\n\n    // get the devicetype from --devicetypeid\n    // --devicetypeid is a string in the form \"devicetype, runtime_version\" (optional: runtime_version)\n    var devicetype = null;\n    if (arr.length < 1) {\n        var dv = findFirstAvailableDevice(list);\n        console.error(util.format('--devicetypeid was not specified, using first available device: %s.', dv.name));\n        return dv;\n    } else {\n        devicetype = arr[0].trim();\n        if (arr.length > 1) {\n            ret_obj.runtime = arr[1].trim();\n        }\n    }\n\n    // check whether devicetype has the \"com.apple.CoreSimulator.SimDeviceType.\" prefix, if not, add it\n    var prefix = 'com.apple.CoreSimulator.SimDeviceType.';\n    if (devicetype.indexOf(prefix) !== 0) {\n        devicetype = prefix + devicetype;\n    }\n\n    // now find the devicename from the devicetype\n    var devicename_found = list.devicetypes.some(function(deviceGroup) {\n        if (deviceGroup.id === devicetype) {\n            ret_obj.name = deviceGroup.name;\n            return true;\n        }\n\n        return false;\n    });\n\n    // device name not found, exit\n    if (!devicename_found) {\n        console.error(util.format('Device type \"%s\" could not be found.', devicetype));\n        process.exit(1);\n    }\n\n    // if runtime_version was not specified, we use a default. Use first available that has the device\n    if (!ret_obj.runtime) {\n        ret_obj.runtime = findAvailableRuntime(list, ret_obj.name);\n    }\n\n    // prepend iOS to runtime version, if necessary\n    if (ret_obj.runtime.indexOf('iOS') === -1) {\n        ret_obj.runtime = util.format('iOS %s', ret_obj.runtime);\n    }\n\n    // now find the deviceid (by runtime and devicename)\n    var deviceid_found = list.devices.some(function(deviceGroup) {\n        // found the runtime, now find the actual device matching devicename\n        if (deviceGroup.runtime === ret_obj.runtime) {\n            return deviceGroup.devices.some(function(device) {\n                if (filterDeviceName(device.name) === filterDeviceName(ret_obj.name)) {\n                    ret_obj.id = device.id;\n                    return true;\n                }\n                return false;\n            });\n        }\n        return false;\n    });\n\n    if (!deviceid_found) {\n        console.error(\n            util.format('Device id for device name \"%s\" and runtime \"%s\" could not be found, or is not available.', ret_obj.name, ret_obj.runtime)\n        );\n        process.exit(1);\n    }\n\n    return ret_obj;\n}\n\n// replace hyphens in iPad Pro name which differ in 'Device Types' and 'Devices'\nfunction filterDeviceName(deviceName) {\n    // replace hyphens in iPad Pro name which differ in 'Device Types' and 'Devices'\n    if (deviceName.indexOf('iPad Pro') === 0) {\n        return deviceName.replace(/\\-/g, ' ').trim();\n    }\n    return deviceName;\n}\n\nvar lib = {\n\n    init: function() {\n        if (!simctl) {\n            simctl = require('simctl');\n        }\n        var output = simctl.check_prerequisites();\n        if (output.code !== 0) {\n            console.error(output.output);\n            process.exit(2);\n        }\n\n        if (!bplist) {\n            bplist = require('bplist-parser');\n        }\n    },\n\n    //jscs:disable disallowUnusedParams\n    showsdks: function(args) {\n        var options = { silent: true, runtimes: true };\n        var list = simctl.list(options).json;\n\n        console.log('Simulator SDK Roots:');\n        list.runtimes.forEach(function(runtime) {\n            if (runtime.available) {\n                console.log(util.format('\"%s\" (%s)', runtime.name, runtime.build));\n                console.log(util.format('\\t(unknown)'));\n            }\n        });\n    },\n    //jscs:enable disallowUnusedParams\n\n    //jscs:disable disallowUnusedParams\n    getdevicetypes: function(args) {\n        var options = { silent: true };\n        var list = simctl.list(options).json;\n\n        var druntimes = findRuntimesGroupByDeviceProperty(list, 'name', true);\n        var name_id_map = {};\n\n        list.devicetypes.forEach(function(device) {\n            name_id_map[ filterDeviceName(device.name) ] = device.id;\n        });\n\n        list = [];\n        var remove = function(devicename, runtime) {\n            // remove \"iOS\" prefix in runtime, remove prefix \"com.apple.CoreSimulator.SimDeviceType.\" in id\n            list.push(util.format('%s, %s', name_id_map[ devicename ].replace(/^com.apple.CoreSimulator.SimDeviceType./, ''), runtime.replace(/^iOS /, '')));\n        };\n\n        var cur = function(devicename) {\n            return function(runtime) {\n                remove(devicename, runtime);\n            };\n        };\n\n        for (var deviceName in druntimes) {\n            var runtimes = druntimes[ deviceName ];\n            var dname = filterDeviceName(deviceName);\n\n            if (!(dname in name_id_map)) {\n                continue;\n            }\n\n            runtimes.forEach(cur(dname));\n        }\n        return list;\n    },\n    //jscs:enable disallowUnusedParams\n\n    //jscs:disable disallowUnusedParams\n    showdevicetypes: function(args) {\n        this.getdevicetypes().forEach(function(device) {\n            console.log(device);\n        });\n    },\n    //jscs:enable disallowUnusedParams\n\n    launch: function(app_path, devicetypeid, log, exit, argv) {\n        var wait_for_debugger = false;\n        var info_plist_path;\n        var app_identifier;\n\n        info_plist_path = path.join(app_path,'Info.plist');\n        if (!fs.existsSync(info_plist_path)) {\n            console.error(info_plist_path + ' file not found.');\n            process.exit(1);\n        }\n\n        bplist.parseFile(info_plist_path, function(err, obj) {\n\n            if (err) {\n                // try to see if a regular plist parser will work\n                if (!plist) {\n                    plist = require('plist');\n                }\n                obj = plist.parse(fs.readFileSync(info_plist_path, 'utf8'));\n                if (obj) {\n                    app_identifier = obj.CFBundleIdentifier;\n                } else {\n                    throw err;\n                }\n            } else {\n                app_identifier = obj[0].CFBundleIdentifier;\n            }\n\n            argv = argv || [];\n\n            // get the deviceid from --devicetypeid\n            // --devicetypeid is a string in the form \"devicetype, runtime_version\" (optional: runtime_version)\n            var device = getDeviceFromDeviceTypeId(devicetypeid);\n\n            // so now we have the deviceid, we can proceed\n            simctl.extensions.start(device.id);\n            simctl.install(device.id, app_path);\n            simctl.launch(wait_for_debugger, device.id, app_identifier, argv);\n            simctl.extensions.log(device.id, log);\n            if (log) {\n                console.log(util.format('logPath: %s', path.resolve(log)));\n            }\n            if (exit) {\n                process.exit(0);\n            }\n        });\n    },\n\n    install: function(app_path, devicetypeid, log, exit) {\n        var wait_for_debugger = false;\n        var info_plist_path;\n        var app_identifier;\n\n        info_plist_path = path.join(app_path,'Info.plist');\n        if (!fs.existsSync(info_plist_path)) {\n            console.error(info_plist_path + ' file not found.');\n            process.exit(1);\n        }\n\n        bplist.parseFile(info_plist_path, function(err, obj) {\n\n            if (err) {\n                throw err;\n            }\n\n            app_identifier = obj[0].CFBundleIdentifier;\n\n            // get the deviceid from --devicetypeid\n            // --devicetypeid is a string in the form \"devicetype, runtime_version\" (optional: runtime_version)\n            var device = getDeviceFromDeviceTypeId(devicetypeid);\n\n            // so now we have the deviceid, we can proceed\n            simctl.extensions.start(device.id);\n            simctl.install(device.id, app_path);\n\n            simctl.extensions.log(device.id, log);\n            if (log) {\n                console.log(util.format('logPath: %s', path.resolve(log)));\n            }\n            if (exit) {\n                process.exit(0);\n            }\n        });\n    },\n\n    start: function(devicetypeid) {\n        var device = {};\n        try {\n            device = getDeviceFromDeviceTypeId(devicetypeid);\n        } catch (e) {\n            console.error(e);\n        }\n\n        simctl.extensions.start(device.id);\n    }\n};\n\nmodule.exports = lib;\n","/home/travis/build/npmtest/node-npmtest-ios-sim/node_modules/ios-sim/src/help.js":"/*\nThe MIT License (MIT)\n\nCopyright (c) 2014 Shazron Abdullah\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\nvar fs = require('fs'),\n    path = require('path');\n\nfunction help() {\n    var docdir = path.join(__dirname, '..', 'doc');\n    var helpfile = path.join(docdir, 'help.txt');\n\n    if (fs.existsSync(helpfile)) {\n        var s = fs.readFileSync(helpfile).toString('utf8');\n        console.log(s);\n    } else {\n        console.log('Help file missing.');\n    }\n}\n\nmodule.exports = help;\n\n","/home/travis/build/npmtest/node-npmtest-ios-sim/node_modules/ios-sim/spec/cli.spec.js":"/**\n    Licensed to the Apache Software Foundation (ASF) under one\n    or more contributor license agreements.  See the NOTICE file\n    distributed with this work for additional information\n    regarding copyright ownership.  The ASF licenses this file\n    to you under the Apache License, Version 2.0 (the\n    \"License\"); you may not use this file except in compliance\n    with the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing,\n    software distributed under the License is distributed on an\n    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n    KIND, either express or implied.  See the License for the\n    specific language governing permissions and limitations\n    under the License.\n*/\n\ndescribe('cli end-to-end', function() {\n\n    beforeEach(function() {\n    });\n\n    afterEach(function() {\n    });\n\n    // it('', function(done) {\n    // });\n});","/home/travis/build/npmtest/node-npmtest-ios-sim/node_modules/ios-sim/spec/commands.spec.js":"/**\n    Licensed to the Apache Software Foundation (ASF) under one\n    or more contributor license agreements.  See the NOTICE file\n    distributed with this work for additional information\n    regarding copyright ownership.  The ASF licenses this file\n    to you under the Apache License, Version 2.0 (the\n    \"License\"); you may not use this file except in compliance\n    with the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing,\n    software distributed under the License is distributed on an\n    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n    KIND, either express or implied.  See the License for the\n    specific language governing permissions and limitations\n    under the License.\n*/\n\ndescribe('commands end-to-end', function() {\n\n    beforeEach(function() {\n    });\n\n    afterEach(function() {\n    });\n\n    // it('', function(done) {\n    // });\n});","/home/travis/build/npmtest/node-npmtest-ios-sim/node_modules/ios-sim/spec/lib.spec.js":"/**\n    Licensed to the Apache Software Foundation (ASF) under one\n    or more contributor license agreements.  See the NOTICE file\n    distributed with this work for additional information\n    regarding copyright ownership.  The ASF licenses this file\n    to you under the Apache License, Version 2.0 (the\n    \"License\"); you may not use this file except in compliance\n    with the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing,\n    software distributed under the License is distributed on an\n    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n    KIND, either express or implied.  See the License for the\n    specific language governing permissions and limitations\n    under the License.\n*/\n\ndescribe('lib end-to-end', function() {\n\n    beforeEach(function() {\n    });\n\n    afterEach(function() {\n    });\n\n    // it('', function(done) {\n    // });\n});","/home/travis/build/npmtest/node-npmtest-ios-sim/node_modules/ios-sim/src/cli.js":"/*\nThe MIT License (MIT)\n\nCopyright (c) 2014 Shazron Abdullah\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\nvar path = require('path'),\n    command_lib = require('./commands'),\n    help = require('./help');\nvar nopt;\n\n/*\n * init\n *\n * initializes nopt and simctl\n * nopt, and simctl are require()d in try-catch below to print a nice error\n * message if one of them is not installed.\n */\nfunction init() {\n    try {\n        nopt = require('nopt');\n        command_lib.init();\n    } catch (e) {\n        console.error(\n            'Please run npm install from this directory:\\n\\t' +\n            path.dirname(__dirname)\n        );\n        process.exit(2);\n    }\n}\n\nfunction cli(inputArgs) {\n    var knownOpts =\n        {\n            'version': Boolean,\n            'help': Boolean,\n            'verbose': Boolean,\n            'exit': Boolean,\n            'use-gdb': Boolean,\n            'uuid': String,\n            'env': String,\n            'setenv': String,\n            'stdout': path,\n            'stderr': path,\n            'timeout': Number,\n            'args': Array,\n            'devicetypeid': String\n        };\n\n    var shortHands = null;\n\n    // If no inputArgs given, use process.argv.\n    inputArgs = inputArgs || process.argv;\n\n    init();\n\n    var args = nopt(knownOpts, shortHands, inputArgs);\n\n    process.on('uncaughtException', function(err) {\n        if (!args.verbose) {\n            console.error(err.message);\n        } else {\n            console.error(err.stack);\n        }\n        process.exit(1);\n    });\n\n    var cmd = args.argv.remain[0];\n\n    // some options do *not* need commands and can be run\n    if (args.help) {\n        help();\n    } else if (args.version) {\n        console.log(require('../package').version);\n    } else if (cmd && command_lib[cmd]) { // command found\n        command_lib[cmd](args);\n    } else {\n        help();\n        process.exit(1);\n    }\n}\n\nmodule.exports = cli;\n\n","/home/travis/build/npmtest/node-npmtest-ios-sim/node_modules/ios-sim/src/commands.js":"/*\nThe MIT License (MIT)\n\nCopyright (c) 2014 Shazron Abdullah\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\nvar path = require('path'),\n    fs = require('fs'),\n    help = require('./help'),\n    lib = require('./lib'),\n    util = require('util');\n\nvar command_lib = {\n\n    init: function() {\n        lib.init();\n    },\n\n    //jscs:disable disallowUnusedParams\n    showsdks: function(args) {\n        lib.showsdks();\n    },\n    //jscs:enable disallowUnusedParams\n\n    //jscs:disable disallowUnusedParams\n    showdevicetypes: function(args) {\n        lib.showdevicetypes();\n    },\n    //jscs:enable disallowUnusedParams\n\n    launch: function(args) {\n        var wait_for_debugger = false;\n        var app_path;\n\n        if (args.argv.remain.length < 2) {\n            help();\n            process.exit(1);\n        }\n\n        app_path = args.argv.remain[1];\n\n        lib.launch(app_path, args.devicetypeid, args.log, args.exit, args.args);\n    },\n\n    install: function(args) {\n        var app_identifier;\n        var argv;\n        var app_path;\n        var info_plist_path;\n\n        if (args.argv.remain.length < 2) {\n            help();\n            process.exit(1);\n        }\n\n        app_path = args.argv.remain[1];\n\n        lib.install(app_path, args.devicetypeid, args.log, args.exit);\n    },\n\n    start: function(args) {\n        lib.start(args.devicetypeid);\n    }\n};\n\nmodule.exports = command_lib;\n\n"}